//@ sourceMappingURL=installer.map
// Generated by CoffeeScript 1.6.1
(function() {
  var Installer, express, fs, path;

  path = require("path");

  fs = require("fs");

  express = require("express");

  /*
      1. Update viwes
      2. Update Static files / assets
      3. Update Template Context Processors
  
      4. Update Middlewares
      5. Update Models
      5. Update Controllers
  */


  Installer = (function() {

    function Installer(_arg) {
      this.app = _arg.app, this.url = _arg.url, this.dirname = _arg.dirname;
      this.setup_templates_dir();
      this.setup_routes();
      this.setup_static();
      this.setup_middlewares();
    }

    Installer.prototype.setup_templates_dir = function() {
      var dirs, root, template_dir, template_dirs, templates_dir, _i, _len, _results;
      root = this.dirname;
      template_dirs = this.app.get("views");
      templates_dir = path.join(root, 'templates');
      dirs = [path.join(root, 'templates'), path.join(root, 'views')];
      _results = [];
      for (_i = 0, _len = dirs.length; _i < _len; _i++) {
        template_dir = dirs[_i];
        _results.push(fs.exists(template_dir, function(exists) {
          if (exists) {
            return template_dirs.push(templates_dir);
          }
        }));
      }
      return _results;
    };

    Installer.prototype.setup_static = function() {
      var app, dirs, root, static_dir, _i, _len, _results;
      root = this.dirname;
      app = this.app;
      root = this.dirname;
      dirs = [path.join(root, 'templates'), path.join(root, 'views')];
      _results = [];
      for (_i = 0, _len = dirs.length; _i < _len; _i++) {
        static_dir = dirs[_i];
        _results.push(fs.exists(static_dir, function(exists) {
          if (exists) {
            return app.use(express["static"](static_dir));
          }
        }));
      }
      return _results;
    };

    Installer.prototype.setup_routes = function() {
      var app, file_path, routes, start, url, _i, _len, _results;
      file_path = path.join(this.dirname, "routes");
      if (!fs.existsSync(file_path + ".js")) {
        return;
      }
      routes = require(file_path);
      if (routes instanceof Array) {
        app = this.app;
        start = this.url;
        if (start[-1] === !"/") {
          start = start + "/";
        }
        _results = [];
        for (_i = 0, _len = routes.length; _i < _len; _i++) {
          url = routes[_i];
          _results.push(app.all(start + url.pattern, url.route));
        }
        return _results;
      }
    };

    Installer.prototype.setup_middlewares = function() {
      var app, file_path, middleware, middlewares, _i, _len, _results;
      file_path = path.join(this.dirname, "middlewares" + ".js");
      if (!fs.existsSync(file_path)) {
        return;
      }
      middlewares = require(file_path);
      if (middlewares instanceof Array) {
        app = this.app;
        _results = [];
        for (_i = 0, _len = middlewares.length; _i < _len; _i++) {
          middleware = middlewares[_i];
          _results.push(app.use(middleware));
        }
        return _results;
      }
    };

    return Installer;

  })();

  module.exports = Installer;

}).call(this);
